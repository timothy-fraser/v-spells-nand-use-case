
SUBJECT:

Use case manual.
device_emu.c

OBSERVED:

The use case manual's specification of the NAND storage device
emulator explicitly requires that, upon executing a read, program, or
erase instruction, it should become busy for a constant amount of time
appropriate to the instruction.

The device emulator implementation in device_emu.c faithfully follows
this requirement.


EXPECTED:

The manual's present specification essentially describes a perfect
device.  Its constant wait times are always within the timeout bound
of driver wait-ready loops.  This means that the test rig's software
tests will be able to exercise the successful exit from driver
wait-ready loops, but never the timeout exit that occurs when a faulty
device does not become ready in time.

This is essentially and idea for a new device emulator feature: if the
device emulator had a mode where it always or sometimes took too long
to return to ready, it would enable tests of both the success and
timeout exit paths of driver wait-ready loops.

Note that implementing this feature might impact addtional parts of
the test rig, as the current design does not anticipate a need for
multiple device emulator modes, and a simple solution that randomly
succeeded or failed would make the test results frustratingly
unpredictable.

2023-06-23:

One possible solution might be to add a function that tests could call
to switch the device emulator from its default mode of perfect timing
and an alternate mode where it supports tests of driver timeout
behavior.  We might implement this function with a breakpoint
instruction, similar to the GPIO functions.

With this function in place, we might add cases to our tests where the
tester switches the device to its alternate mode, tries a read,
program, or erase operation that involves the driver's wait-ready
loop, and tries to confirm that the driver polls, sleeps, and/or
eventually times out.

We'd need to think about what these tests want to accomplish, how
they'd do it, and what device emulator alternate-mode semantics would
best support that.  The best alternate mode semantics might be "never
ready," or "not ready the first time but ready subsequently," or
perhaps something else.

The key idea for this approach is that the driver controls the device
emulator mode and switches it as it runs though its test cases, rather
than the driver mode being specified with a command-line switch and
being fixed for the entire run.

2023-08-28:

I initially tried the above approach to fix this bug: I added a GPIO
pin that would put the device emulator into a test mode where, once an
execute operation made it busy, it would never become ready again
until it exited that test mode.  This solution worked, but I found
that there was too much measurement noise in the full test rig to
easily measure the tiny wall-clock-time and CPU-usage-time differences
I needed to test nand_wait() correctness.

I ultimately wound up leaving the device emulator as it was and
implementing the nand_wait() tests as separate unit test programs,
instead.  They are now under driver/test.
